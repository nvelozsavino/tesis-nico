#ifndef _camara_h_included_
#define _camara_h_included_


#include "spectrum.hpp"
#include <cstdlib>
#include <iostream>

typedef enum {BW,COLOR} tipoCamara;
typedef enum {FULL_FRAME,FRAME_TRANSFERE,INTERLINE} tipoFrame;
typedef enum {FIXED_FPS_FIXED_EXPOSE,FIXED_FPS_AUTO_EXPOSE,AUTO_FPS_FIXED_EXPOSE} autoSettings;
typedef struct {


} parametrosCamara;
#define RAIZ_2PI 2.506628274631000502415765284811


#define GREEN_MIU		540e-9
#define GREEN_SIGMA		90e-9
//62e-9
#define GREEN_AMP		(RAIZ_2PI*GREEN_SIGMA)/(LIGHT_SPEED*LIGHT_SPEED)


#define GRAY_MIU		540e-9
#define GRAY_SIGMA		235e-9
#define GRAY_AMP		(RAIZ_2PI*GRAY_SIGMA)/(LIGHT_SPEED*LIGHT_SPEED)



#define RED_MIU			650e-9
//650e-9
#define RED_SIGMA		96e-9
#define RED_AMP			(RAIZ_2PI*RED_SIGMA)/(LIGHT_SPEED*LIGHT_SPEED)



#define BLUE_MIU		462e-9
#define BLUE_SIGMA		93e-9
#define BLUE_AMP		(RAIZ_2PI*BLUE_SIGMA)/(LIGHT_SPEED*LIGHT_SPEED)

#define SPECTRUM_SIZE	1000
#define SPECTRUM_RESOLUTION

#define DEFAULT_TIPO    COLOR
#define DEFAULT_TRANSPORT_TIME  1e-9
#define DEFAULT_WIDTH   800
#define DEFAULT_HEIGHT  600
#define DEFAULT_FPS     60
#define DEFAULT_FRAME_TYPE  INTERLINE

class ROI {
    public:
        unsigned int top;
        unsigned int left;
        unsigned int width;
        unsigned int height;

    ROI();
    ROI(unsigned int w, unsigned int h, unsigned int t, unsigned int l);
    int operator== (ROI src);
    int operator!= (ROI src);
};


class Camara {
    private:
        float _exposureTime;
        float _fps;
        float _transportTime;
//        float _adcTime;
        float _shutterTime;
        unsigned int _width;
        unsigned int _height;
        ROI _roi;
        tipoCamara _tipo;
        tipoFrame   _frameType;
        Spectrum *_sensor;
        autoSettings _autoConfig;
        int calcTimes();

    public:
        int operator== (Camara src);
        int operator!= (Camara src);
        
        float exposureTime();
        int exposureTime(float ExposureTime);

        float fps();
        int fps(float Fps);

//        bool hasROI ();

        ROI roi ();
        int roi (unsigned int width, unsigned int height,unsigned int top, unsigned int left);

        Spectrum sensor (int index);

        int setSize(unsigned int width, unsigned int height);

        unsigned int width();
        //int width (unsigned int Width);

        unsigned int height();
        //int height (unsigned int Height);

        int tipo (tipoCamara Tipo);
        tipoCamara tipo();

        autoSettings autoConfig();
        int autoConfig(autoSettings AutoConfig);

        tipoFrame frameType();

        //int createCamara(Camara *camara, )
        //Constructor
        Camara();

        void init(unsigned int width, unsigned int height,)

        void initCamaraFPS(unsigned int width, unsigned int height, float fps, tipoCamara tipo, tipoFrame frameType, float transportTime,float shutterTime);
        void initCamaraET(unsigned int width, unsigned int height, float ExposureTime, tipoCamara tipo, tipoFrame frame, float transportTime,float shutterTime);

        int setSpectrums(string redFile,string greenFile, string blueFile);
        //Destructor
        ~Camara();


};

#endif
