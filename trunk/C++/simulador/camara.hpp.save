#ifndef _camara_h_included_
#define _camara_h_included_


#include "spectrum.hpp"
#include <cstdlib>
#include <iostream>

typedef enum {BW,COLOR} tipoCamara;
typedef enum {FULL_FRAME,FRAME_TRANSFERE,INTERLINE} tipoFrame;
typedef enum {FIXED_FPS_FIXED_EXPOSE,FIXED_FPS_AUTO_EXPOSE,AUTO_FPS_FIXED_EXPOSE} autoSettings;
typedef struct {


} parametrosCamara;
#define RAIZ_2PI 2.506628274631000502415765284811


#define GREEN_MIU		540e-9
#define GREEN_SIGMA		90e-9
//62e-9
#define GREEN_AMP		(RAIZ_2PI*GREEN_SIGMA)/(LIGHT_SPEED*LIGHT_SPEED)


#define GRAY_MIU		540e-9
#define GRAY_SIGMA		235e-9
#define GRAY_AMP		(RAIZ_2PI*GRAY_SIGMA)/(LIGHT_SPEED*LIGHT_SPEED)



#define RED_MIU			650e-9
//650e-9
#define RED_SIGMA		96e-9
#define RED_AMP			(RAIZ_2PI*RED_SIGMA)/(LIGHT_SPEED*LIGHT_SPEED)



#define BLUE_MIU		462e-9
#define BLUE_SIGMA		93e-9
#define BLUE_AMP		(RAIZ_2PI*BLUE_SIGMA)/(LIGHT_SPEED*LIGHT_SPEED)

#define SPECTRUM_SIZE	1000
#define SPECTRUM_RESOLUTION

#define DEFAULT_TIPO    COLOR
#define DEFAULT_TRANSPORT_TIME  1e-9
#define DEFAULT_EXPOSURE_TIME  1e-9
#define DEFAULT_SHUTTER_TIME    0
#define DEFAULT_WIDTH   800
#define DEFAULT_HEIGHT  600
#define DEFAULT_FPS     60
#define DEFAULT_FRAME_TYPE  INTERLINE

class ROI {
    public:
        unsigned int top;
        unsigned int left;
        unsigned int width;
        unsigned int height;

    ROI();
    ROI(unsigned int w, unsigned int h, unsigned int t, unsigned int l);
    int operator== (ROI src);
    int operator!= (ROI src);
};


class Camara {
    private:
        float _exposureTime;
        float _fps;
        float _transportTime;
//        float _adcTime;
        float _shutterTime;
        unsigned int _width;
        unsigned int _height;
        ROI _roi;
        tipoCamara _tipo;
        tipoFrame   _frameType;
        Spectrum *_sensor;
        autoSettings _autoConfig;
        int calcTimes();
        int _fromFiles;
        string _redFile,_greenFile,_blueFile,_whiteFile;

    public:

//Constructor
Camara::Camara(){
    _sensor=NULL;
    _redFile="";
    _greenFile="";
    _blueFile="";
    _whiteFile="";
    init(DEFAULT_WIDTH,DEFAULT_HEIGHT,DEFAULT_FPS,DEFAULT_EXPOSURE_TIME,DEFAULT_TIPO,DEFAULT_FRAME_TYPE,DEFAULT_TRANSPORT_TIME,DEFAULT_SHUTTER_TIME);
    setSpectrumsDefaults();

}

int Camara::init(unsigned int Width, unsigned int Height,float Fps, float ExposureTime, tipoCamara Tipo, tipoFrame FrameType=DEFAULT_FRAME_TYPE, float TransportTime=DEFAULT_TRANSPORT_TIME,float ShutterTime=DEFAULT_SHUTTER_TIME);
{

    _width=Width;
    _height=Height;
    _fps=Fps;
    _exposureTime=ExposureTime;
    _tipo=Tipo;
    _frameType=FrameType;
    _transportTime=TransportTime;
    _shutterTime=ShutterTime;
    _autoConfig=FIXED_FPS_FIXED_EXPOSE;
    _roi.top=0;
    _roi.left=0;
    _roi.width=_width;
    _roi.height=_height;
    return calcTimes();
}

void Camara::initFPS(unsigned int Width, unsigned int Height,float Fps, tipoCamara Tipo, tipoFrame FrameType=DEFAULT_FRAME_TYPE, float TransportTime=DEFAULT_TRANSPORT_TIME,float ShutterTime=DEFAULT_SHUTTER_TIME);
{
    _width=Width;
    _height=Height;
    _fps=Fps;
    _exposureTime=DEFAULT_EXPOSURE_TIME;
    _tipo=Tipo;
    _frameType=FrameType;
    _transportTime=TransportTime;
    _shutterTime=ShutterTime;
    _autoConfig=FIXED_FPS_AUTO_EXPOSE;
    _roi.top=0;
    _roi.left=0;
    _roi.width=_width;
    _roi.height=_height;
    return calcTimes();

}

void Camara::initExposureTime(unsigned int Width, unsigned int Height, float ExposureTime, tipoCamara Tipo, tipoFrame FrameType=DEFAULT_FRAME_TYPE, float TransportTime=DEFAULT_TRANSPORT_TIME,float ShutterTime=DEFAULT_SHUTTER_TIME);
{
    _width=Width;
    _height=Height;
    _fps=DEFAULT_FPS;
    _exposureTime=ExposureTime;
    _tipo=Tipo;
    _frameType=FrameType;
    _transportTime=TransportTime;
    _shutterTime=ShutterTime;
    _autoConfig=AUTO_FPS_FIXED_EXPOSE;
    _roi.top=0;
    _roi.left=0;
    _roi.width=_width;
    _roi.height=_height;
    return calcTimes();


}

//Destructor
Camara::~Camara();

//Operadores
int Camara::operator== (Camara src);
int Camara::operator!= (Camara src);

//Funciones GET
unsigned int Camara::width();
unsigned int Camara::height();
ROI Camara::roi ();
float Camara::fps();
float Camara::exposureTime();
tipoCamara Camara::tipo();
tipoFrame Camara::frameType();
float Camara::transportTime();
float Camara::shutterTime();
int Camara::fromFiles();
string Camara::redFile();
string Camara::greenFile();
string Camara::blueFile();
string Camara::whiteFile();
Spectrum Camara::sensor (int index);
autoSettings Camara::autoConfig();


//Funciones SET
int Camara::setSize(unsigned int width, unsigned int height);
int Camara::roi (unsigned int width, unsigned int height,unsigned int top, unsigned int left);
int Camara::roi (ROI Roi);
int Camara::fps(float Fps);
int Camara::exposureTime(float ExposureTime);
int Camara::fpsExposureTime(float Fps,float ExposureTime);
int Camara::tipo(tipoCamara Tipo);
int Camara::frameType(tipoFrame FrameType);
int Camara::transportTime(float TransportTime);
int Camara::shutterTime(float ShutterTime);
int Camara::setSpectrumsFiles(string RedFile, string GreenFile, string BlueFile);
int Camara::setSpectrumsFiles(string WhiteFile);
int Camara::setSpectrumsDefaults();
int Camara::autoConfig(autoSettings AutoConfig);


//Funciones Privadas
int Camara::calcTimes();



};

#endif
